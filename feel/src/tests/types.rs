use crate::context::FeelContext;
use crate::names::Name;
use crate::types::{is_built_in_type_name, FeelType};
use crate::values::{Value, Values};
use crate::{value_null, value_number, FeelDate, FeelNumber};

#[test]
#[rustfmt::skip]
fn test_get_value_checked() {
  let t_any = FeelType::Any;
  let t_boolean = FeelType::Boolean;
  let v_null = Value::Null(None);
  let v_boolean = Value::Boolean(true);
  let v_string = Value::String("hello".to_owned());
  assert_eq!("null", t_any.get_value_checked(&v_null).unwrap().to_string());
  assert_eq!("true", t_any.get_value_checked(&v_boolean).unwrap().to_string());
  assert!(t_boolean.get_value_checked(&v_string).is_err());
  assert_eq!(r#"TypesError: invalid value for retrieving with type check, type = 'boolean', value = '"hello"'"#, format!("{}", t_boolean.get_value_checked(&v_string).err().unwrap()).as_str());
}

#[test]
fn test_type_equivalence() {
  let name_a = Name::from("a");
  let name_b = Name::from("b");
  let name_c = Name::from("c");
  let t_any = FeelType::Any;
  let t_boolean = FeelType::Boolean;
  let t_date = FeelType::Date;
  let t_date_time = FeelType::DateTime;
  let t_days_and_time_duration = FeelType::DaysAndTimeDuration;
  let t_null = FeelType::Null;
  let t_number = FeelType::Number;
  let t_string = FeelType::String;
  let t_time = FeelType::Time;
  let t_years_and_months_duration = FeelType::YearsAndMonthsDuration;
  let t_list = FeelType::List(Box::new(FeelType::Boolean));
  let t_list_b = FeelType::List(Box::new(FeelType::Number));
  let t_context = FeelType::context(&[(&name_a, &t_number)]);
  let t_context_a_b = FeelType::context(&[(&name_a, &t_number), (&name_b, &t_boolean)]);
  let t_context_a_b_c = FeelType::context(&[(&name_a, &t_number), (&name_b, &t_boolean), (&name_c, &t_string)]);
  let t_function = FeelType::function(&[FeelType::Number, FeelType::Number], &t_number);
  let t_function_b = FeelType::function(&[FeelType::Number, FeelType::Number], &t_boolean);
  let t_function_c = FeelType::function(&[FeelType::Number], &t_string);
  let t_range = FeelType::range(&t_number);
  let t_range_b = FeelType::range(&t_date);
  // any
  assert!(t_any.is_equivalent(&t_any));
  assert!(!t_any.is_equivalent(&t_boolean));
  assert!(!t_any.is_equivalent(&t_context));
  assert!(!t_any.is_equivalent(&t_date));
  assert!(!t_any.is_equivalent(&t_date_time));
  assert!(!t_any.is_equivalent(&t_days_and_time_duration));
  assert!(!t_boolean.is_equivalent(&t_function));
  assert!(!t_boolean.is_equivalent(&t_list));
  assert!(!t_boolean.is_equivalent(&t_null));
  assert!(!t_boolean.is_equivalent(&t_number));
  assert!(!t_boolean.is_equivalent(&t_range));
  assert!(!t_boolean.is_equivalent(&t_string));
  assert!(!t_boolean.is_equivalent(&t_time));
  assert!(!t_boolean.is_equivalent(&t_years_and_months_duration));
  // boolean
  assert!(t_boolean.is_equivalent(&t_boolean));
  assert!(!t_boolean.is_equivalent(&t_any));
  assert!(!t_boolean.is_equivalent(&t_context));
  assert!(!t_boolean.is_equivalent(&t_date));
  assert!(!t_boolean.is_equivalent(&t_date_time));
  assert!(!t_boolean.is_equivalent(&t_days_and_time_duration));
  assert!(!t_boolean.is_equivalent(&t_function));
  assert!(!t_boolean.is_equivalent(&t_list));
  assert!(!t_boolean.is_equivalent(&t_null));
  assert!(!t_boolean.is_equivalent(&t_number));
  assert!(!t_boolean.is_equivalent(&t_range));
  assert!(!t_boolean.is_equivalent(&t_string));
  assert!(!t_boolean.is_equivalent(&t_time));
  assert!(!t_boolean.is_equivalent(&t_years_and_months_duration));
  // context
  assert!(t_context.is_equivalent(&t_context));
  assert!(t_context_a_b.is_equivalent(&t_context_a_b));
  assert!(t_context_a_b_c.is_equivalent(&t_context_a_b_c));
  assert!(!t_context.is_equivalent(&t_context_a_b));
  assert!(!t_context_a_b.is_equivalent(&t_context_a_b_c));
  assert!(!t_context_a_b.is_equivalent(&t_context_a_b_c));
  assert!(!t_context.is_equivalent(&t_any));
  assert!(!t_context.is_equivalent(&t_boolean));
  assert!(!t_context.is_equivalent(&t_date));
  assert!(!t_context.is_equivalent(&t_date_time));
  assert!(!t_context.is_equivalent(&t_days_and_time_duration));
  assert!(!t_context.is_equivalent(&t_function));
  assert!(!t_context.is_equivalent(&t_list));
  assert!(!t_context.is_equivalent(&t_null));
  assert!(!t_context.is_equivalent(&t_number));
  assert!(!t_context.is_equivalent(&t_range));
  assert!(!t_context.is_equivalent(&t_string));
  assert!(!t_context.is_equivalent(&t_time));
  assert!(!t_context.is_equivalent(&t_years_and_months_duration));
  // date
  assert!(t_date.is_equivalent(&t_date));
  assert!(!t_date.is_equivalent(&t_any));
  assert!(!t_date.is_equivalent(&t_boolean));
  assert!(!t_date.is_equivalent(&t_context));
  assert!(!t_date.is_equivalent(&t_date_time));
  assert!(!t_date.is_equivalent(&t_days_and_time_duration));
  assert!(!t_date.is_equivalent(&t_function));
  assert!(!t_date.is_equivalent(&t_list));
  assert!(!t_date.is_equivalent(&t_null));
  assert!(!t_date.is_equivalent(&t_number));
  assert!(!t_date.is_equivalent(&t_range));
  assert!(!t_date.is_equivalent(&t_string));
  assert!(!t_date.is_equivalent(&t_time));
  assert!(!t_date.is_equivalent(&t_years_and_months_duration));
  // date and time
  assert!(t_date_time.is_equivalent(&t_date_time));
  assert!(!t_date_time.is_equivalent(&t_any));
  assert!(!t_date_time.is_equivalent(&t_boolean));
  assert!(!t_date_time.is_equivalent(&t_context));
  assert!(!t_date_time.is_equivalent(&t_date));
  assert!(!t_date_time.is_equivalent(&t_function));
  assert!(!t_date_time.is_equivalent(&t_list));
  assert!(!t_date_time.is_equivalent(&t_null));
  assert!(!t_date_time.is_equivalent(&t_number));
  assert!(!t_date_time.is_equivalent(&t_range));
  assert!(!t_date_time.is_equivalent(&t_string));
  assert!(!t_date_time.is_equivalent(&t_time));
  assert!(!t_date_time.is_equivalent(&t_years_and_months_duration));
  // days and time duration
  assert!(t_days_and_time_duration.is_equivalent(&t_days_and_time_duration));
  assert!(!t_days_and_time_duration.is_equivalent(&t_any));
  assert!(!t_days_and_time_duration.is_equivalent(&t_boolean));
  assert!(!t_days_and_time_duration.is_equivalent(&t_context));
  assert!(!t_days_and_time_duration.is_equivalent(&t_date));
  assert!(!t_days_and_time_duration.is_equivalent(&t_date_time));
  assert!(!t_days_and_time_duration.is_equivalent(&t_function));
  assert!(!t_days_and_time_duration.is_equivalent(&t_list));
  assert!(!t_days_and_time_duration.is_equivalent(&t_null));
  assert!(!t_days_and_time_duration.is_equivalent(&t_number));
  assert!(!t_days_and_time_duration.is_equivalent(&t_range));
  assert!(!t_days_and_time_duration.is_equivalent(&t_string));
  assert!(!t_days_and_time_duration.is_equivalent(&t_time));
  assert!(!t_days_and_time_duration.is_equivalent(&t_years_and_months_duration));
  // function
  assert!(t_function.is_equivalent(&t_function));
  assert!(t_function_b.is_equivalent(&t_function_b));
  assert!(t_function_c.is_equivalent(&t_function_c));
  assert!(!t_function.is_equivalent(&t_function_b));
  assert!(!t_function.is_equivalent(&t_function_c));
  assert!(!t_function_b.is_equivalent(&t_function));
  assert!(!t_function_b.is_equivalent(&t_function_c));
  assert!(!t_function_c.is_equivalent(&t_function));
  assert!(!t_function_c.is_equivalent(&t_function_b));
  assert!(!t_function.is_equivalent(&t_any));
  assert!(!t_function.is_equivalent(&t_boolean));
  assert!(!t_function.is_equivalent(&t_context));
  assert!(!t_function.is_equivalent(&t_date));
  assert!(!t_function.is_equivalent(&t_date_time));
  assert!(!t_function.is_equivalent(&t_days_and_time_duration));
  assert!(!t_function.is_equivalent(&t_list));
  assert!(!t_function.is_equivalent(&t_null));
  assert!(!t_function.is_equivalent(&t_range));
  assert!(!t_function.is_equivalent(&t_string));
  assert!(!t_function.is_equivalent(&t_time));
  assert!(!t_function.is_equivalent(&t_years_and_months_duration));
  // list
  assert!(t_list_b.is_equivalent(&t_list_b));
  assert!(!t_list_b.is_equivalent(&t_list));
  assert!(!t_list.is_equivalent(&t_any));
  assert!(!t_list.is_equivalent(&t_boolean));
  assert!(!t_list.is_equivalent(&t_context));
  assert!(!t_list.is_equivalent(&t_date));
  assert!(!t_list.is_equivalent(&t_date_time));
  assert!(!t_list.is_equivalent(&t_days_and_time_duration));
  assert!(!t_list.is_equivalent(&t_function));
  assert!(!t_list.is_equivalent(&t_null));
  assert!(!t_list.is_equivalent(&t_range));
  assert!(!t_list.is_equivalent(&t_string));
  assert!(!t_list.is_equivalent(&t_time));
  assert!(!t_list.is_equivalent(&t_years_and_months_duration));
  // null
  assert!(t_null.is_equivalent(&t_null));
  assert!(!t_null.is_equivalent(&t_any));
  assert!(!t_null.is_equivalent(&t_boolean));
  assert!(!t_null.is_equivalent(&t_context));
  assert!(!t_null.is_equivalent(&t_date));
  assert!(!t_null.is_equivalent(&t_date_time));
  assert!(!t_null.is_equivalent(&t_days_and_time_duration));
  assert!(!t_null.is_equivalent(&t_function));
  assert!(!t_null.is_equivalent(&t_list));
  assert!(!t_null.is_equivalent(&t_range));
  assert!(!t_null.is_equivalent(&t_string));
  assert!(!t_null.is_equivalent(&t_time));
  assert!(!t_null.is_equivalent(&t_years_and_months_duration));
  // number
  assert!(t_number.is_equivalent(&t_number));
  assert!(!t_number.is_equivalent(&t_any));
  assert!(!t_number.is_equivalent(&t_boolean));
  assert!(!t_number.is_equivalent(&t_context));
  assert!(!t_number.is_equivalent(&t_date));
  assert!(!t_number.is_equivalent(&t_date_time));
  assert!(!t_number.is_equivalent(&t_days_and_time_duration));
  assert!(!t_number.is_equivalent(&t_function));
  assert!(!t_number.is_equivalent(&t_list));
  assert!(!t_number.is_equivalent(&t_null));
  assert!(!t_number.is_equivalent(&t_range));
  assert!(!t_number.is_equivalent(&t_string));
  assert!(!t_number.is_equivalent(&t_time));
  assert!(!t_number.is_equivalent(&t_years_and_months_duration));
  // range
  assert!(t_range.is_equivalent(&t_range));
  assert!(t_range_b.is_equivalent(&t_range_b));
  assert!(!t_range.is_equivalent(&t_any));
  assert!(!t_range.is_equivalent(&t_boolean));
  assert!(!t_range.is_equivalent(&t_context));
  assert!(!t_range.is_equivalent(&t_date));
  assert!(!t_range.is_equivalent(&t_date_time));
  assert!(!t_range.is_equivalent(&t_days_and_time_duration));
  assert!(!t_range.is_equivalent(&t_function));
  assert!(!t_range.is_equivalent(&t_list));
  assert!(!t_range.is_equivalent(&t_null));
  assert!(!t_range.is_equivalent(&t_number));
  assert!(!t_range.is_equivalent(&t_string));
  assert!(!t_range.is_equivalent(&t_time));
  assert!(!t_range.is_equivalent(&t_years_and_months_duration));
  // string
  assert!(t_string.is_equivalent(&t_string));
  assert!(!t_string.is_equivalent(&t_any));
  assert!(!t_string.is_equivalent(&t_boolean));
  assert!(!t_string.is_equivalent(&t_context));
  assert!(!t_string.is_equivalent(&t_date));
  assert!(!t_string.is_equivalent(&t_date_time));
  assert!(!t_string.is_equivalent(&t_days_and_time_duration));
  assert!(!t_string.is_equivalent(&t_function));
  assert!(!t_string.is_equivalent(&t_list));
  assert!(!t_string.is_equivalent(&t_null));
  assert!(!t_string.is_equivalent(&t_number));
  assert!(!t_string.is_equivalent(&t_range));
  assert!(!t_string.is_equivalent(&t_time));
  assert!(!t_string.is_equivalent(&t_years_and_months_duration));
  // time
  assert!(t_time.is_equivalent(&t_time));
  assert!(!t_time.is_equivalent(&t_any));
  assert!(!t_time.is_equivalent(&t_boolean));
  assert!(!t_time.is_equivalent(&t_context));
  assert!(!t_time.is_equivalent(&t_date));
  assert!(!t_time.is_equivalent(&t_date_time));
  assert!(!t_time.is_equivalent(&t_days_and_time_duration));
  assert!(!t_time.is_equivalent(&t_function));
  assert!(!t_time.is_equivalent(&t_list));
  assert!(!t_time.is_equivalent(&t_null));
  assert!(!t_time.is_equivalent(&t_number));
  assert!(!t_time.is_equivalent(&t_range));
  assert!(!t_time.is_equivalent(&t_string));
  assert!(!t_time.is_equivalent(&t_years_and_months_duration));
  // years and months duration
  assert!(t_years_and_months_duration.is_equivalent(&t_years_and_months_duration));
  assert!(!t_years_and_months_duration.is_equivalent(&t_any));
  assert!(!t_years_and_months_duration.is_equivalent(&t_boolean));
  assert!(!t_years_and_months_duration.is_equivalent(&t_context));
  assert!(!t_years_and_months_duration.is_equivalent(&t_date));
  assert!(!t_years_and_months_duration.is_equivalent(&t_date_time));
  assert!(!t_years_and_months_duration.is_equivalent(&t_days_and_time_duration));
  assert!(!t_years_and_months_duration.is_equivalent(&t_function));
  assert!(!t_years_and_months_duration.is_equivalent(&t_list));
  assert!(!t_years_and_months_duration.is_equivalent(&t_null));
  assert!(!t_years_and_months_duration.is_equivalent(&t_number));
  assert!(!t_years_and_months_duration.is_equivalent(&t_range));
  assert!(!t_years_and_months_duration.is_equivalent(&t_string));
  assert!(!t_years_and_months_duration.is_equivalent(&t_time));
}

#[test]
fn test_type_conformance() {
  let name_a = Name::from("a");
  let name_b = Name::from("b");
  let name_c = Name::from("c");
  let t_any = FeelType::Any;
  let t_boolean = FeelType::Boolean;
  let t_date = FeelType::Date;
  let t_date_time = FeelType::DateTime;
  let t_days_and_time_duration = FeelType::DaysAndTimeDuration;
  let t_null = FeelType::Null;
  let t_number = FeelType::Number;
  let t_string = FeelType::String;
  let t_time = FeelType::Time;
  let t_years_and_months_duration = FeelType::YearsAndMonthsDuration;
  let t_list = FeelType::List(Box::new(FeelType::Boolean));
  let t_list_b = FeelType::List(Box::new(FeelType::Number));
  let t_context = FeelType::context(&[(&name_a, &t_number)]);
  let t_context_a_b = FeelType::context(&[(&name_a, &t_number), (&name_b, &t_boolean)]);
  let t_context_a_b_c = FeelType::context(&[(&name_a, &t_number), (&name_b, &t_boolean), (&name_c, &t_string)]);
  let t_function = FeelType::function(&[FeelType::Number, FeelType::Number], &t_number);
  let t_function_b = FeelType::function(&[FeelType::Number, FeelType::Number], &t_boolean);
  let t_function_c = FeelType::function(&[FeelType::Number], &t_string);
  let t_function_d = FeelType::function(&[FeelType::Any], &t_string);
  let t_range = FeelType::range(&t_number);
  let t_range_b = FeelType::range(&t_date);
  // any
  assert!(t_any.is_conformant(&t_any));
  assert!(!t_any.is_conformant(&t_boolean));
  assert!(!t_any.is_conformant(&t_context));
  assert!(!t_any.is_conformant(&t_date));
  assert!(!t_any.is_conformant(&t_date_time));
  assert!(!t_any.is_conformant(&t_days_and_time_duration));
  // boolean
  assert!(!t_boolean.is_conformant(&t_function));
  assert!(!t_boolean.is_conformant(&t_list));
  assert!(!t_boolean.is_conformant(&t_null));
  assert!(!t_boolean.is_conformant(&t_number));
  assert!(!t_boolean.is_conformant(&t_range));
  assert!(!t_boolean.is_conformant(&t_string));
  assert!(!t_boolean.is_conformant(&t_time));
  assert!(!t_boolean.is_conformant(&t_years_and_months_duration));
  assert!(t_boolean.is_conformant(&t_boolean));
  assert!(t_boolean.is_conformant(&t_any));
  assert!(!t_boolean.is_conformant(&t_context));
  assert!(!t_boolean.is_conformant(&t_date));
  assert!(!t_boolean.is_conformant(&t_date_time));
  assert!(!t_boolean.is_conformant(&t_days_and_time_duration));
  assert!(!t_boolean.is_conformant(&t_function));
  assert!(!t_boolean.is_conformant(&t_list));
  assert!(!t_boolean.is_conformant(&t_null));
  assert!(!t_boolean.is_conformant(&t_number));
  assert!(!t_boolean.is_conformant(&t_range));
  assert!(!t_boolean.is_conformant(&t_string));
  assert!(!t_boolean.is_conformant(&t_time));
  assert!(!t_boolean.is_conformant(&t_years_and_months_duration));
  // context
  assert!(t_context.is_conformant(&t_context));
  assert!(t_context_a_b.is_conformant(&t_context_a_b));
  assert!(t_context_a_b.is_conformant(&t_context));
  assert!(t_context_a_b_c.is_conformant(&t_context_a_b_c));
  assert!(t_context_a_b_c.is_conformant(&t_context_a_b));
  assert!(!t_context.is_conformant(&t_context_a_b));
  assert!(!t_context_a_b.is_conformant(&t_context_a_b_c));
  assert!(!t_context_a_b.is_conformant(&t_context_a_b_c));
  assert!(t_context.is_conformant(&t_any));
  assert!(!t_context.is_conformant(&t_boolean));
  assert!(!t_context.is_conformant(&t_date));
  assert!(!t_context.is_conformant(&t_date_time));
  assert!(!t_context.is_conformant(&t_days_and_time_duration));
  assert!(!t_context.is_conformant(&t_function));
  assert!(!t_context.is_conformant(&t_list));
  assert!(!t_context.is_conformant(&t_null));
  assert!(!t_context.is_conformant(&t_number));
  assert!(!t_context.is_conformant(&t_range));
  assert!(!t_context.is_conformant(&t_string));
  assert!(!t_context.is_conformant(&t_time));
  assert!(!t_context.is_conformant(&t_years_and_months_duration));
  // date
  assert!(t_date.is_conformant(&t_date));
  assert!(t_date.is_conformant(&t_any));
  assert!(!t_date.is_conformant(&t_boolean));
  assert!(!t_date.is_conformant(&t_context));
  assert!(!t_date.is_conformant(&t_date_time));
  assert!(!t_date.is_conformant(&t_days_and_time_duration));
  assert!(!t_date.is_conformant(&t_function));
  assert!(!t_date.is_conformant(&t_list));
  assert!(!t_date.is_conformant(&t_null));
  assert!(!t_date.is_conformant(&t_number));
  assert!(!t_date.is_conformant(&t_range));
  assert!(!t_date.is_conformant(&t_string));
  assert!(!t_date.is_conformant(&t_time));
  assert!(!t_date.is_conformant(&t_years_and_months_duration));
  // date and time
  assert!(t_date_time.is_conformant(&t_date_time));
  assert!(t_date_time.is_conformant(&t_any));
  assert!(!t_date_time.is_conformant(&t_boolean));
  assert!(!t_date_time.is_conformant(&t_context));
  assert!(!t_date_time.is_conformant(&t_date));
  assert!(!t_date_time.is_conformant(&t_function));
  assert!(!t_date_time.is_conformant(&t_list));
  assert!(!t_date_time.is_conformant(&t_null));
  assert!(!t_date_time.is_conformant(&t_number));
  assert!(!t_date_time.is_conformant(&t_range));
  assert!(!t_date_time.is_conformant(&t_string));
  assert!(!t_date_time.is_conformant(&t_time));
  assert!(!t_date_time.is_conformant(&t_years_and_months_duration));
  // days and time duration
  assert!(t_days_and_time_duration.is_conformant(&t_days_and_time_duration));
  assert!(t_days_and_time_duration.is_conformant(&t_any));
  assert!(!t_days_and_time_duration.is_conformant(&t_boolean));
  assert!(!t_days_and_time_duration.is_conformant(&t_context));
  assert!(!t_days_and_time_duration.is_conformant(&t_date));
  assert!(!t_days_and_time_duration.is_conformant(&t_date_time));
  assert!(!t_days_and_time_duration.is_conformant(&t_function));
  assert!(!t_days_and_time_duration.is_conformant(&t_list));
  assert!(!t_days_and_time_duration.is_conformant(&t_null));
  assert!(!t_days_and_time_duration.is_conformant(&t_number));
  assert!(!t_days_and_time_duration.is_conformant(&t_range));
  assert!(!t_days_and_time_duration.is_conformant(&t_string));
  assert!(!t_days_and_time_duration.is_conformant(&t_time));
  assert!(!t_days_and_time_duration.is_conformant(&t_years_and_months_duration));
  // function
  assert!(t_function.is_conformant(&t_function));
  assert!(t_function_b.is_conformant(&t_function_b));
  assert!(t_function_c.is_conformant(&t_function_c));
  assert!(!t_function.is_conformant(&t_function_b));
  assert!(!t_function.is_conformant(&t_function_c));
  assert!(!t_function_b.is_conformant(&t_function));
  assert!(!t_function_b.is_conformant(&t_function_c));
  assert!(!t_function_c.is_conformant(&t_function));
  assert!(!t_function_c.is_conformant(&t_function_b));
  assert!(t_function_d.is_conformant(&t_function_c));
  assert!(t_function.is_conformant(&t_any));
  assert!(!t_function.is_conformant(&t_boolean));
  assert!(!t_function.is_conformant(&t_context));
  assert!(!t_function.is_conformant(&t_date));
  assert!(!t_function.is_conformant(&t_date_time));
  assert!(!t_function.is_conformant(&t_days_and_time_duration));
  assert!(!t_function.is_conformant(&t_list));
  assert!(!t_function.is_conformant(&t_null));
  assert!(!t_function.is_conformant(&t_range));
  assert!(!t_function.is_conformant(&t_string));
  assert!(!t_function.is_conformant(&t_time));
  assert!(!t_function.is_conformant(&t_years_and_months_duration));
  // list
  assert!(t_list_b.is_conformant(&t_list_b));
  assert!(!t_list_b.is_conformant(&t_list));
  assert!(t_list.is_conformant(&t_any));
  assert!(!t_list.is_conformant(&t_boolean));
  assert!(!t_list.is_conformant(&t_context));
  assert!(!t_list.is_conformant(&t_date));
  assert!(!t_list.is_conformant(&t_date_time));
  assert!(!t_list.is_conformant(&t_days_and_time_duration));
  assert!(!t_list.is_conformant(&t_function));
  assert!(!t_list.is_conformant(&t_null));
  assert!(!t_list.is_conformant(&t_range));
  assert!(!t_list.is_conformant(&t_string));
  assert!(!t_list.is_conformant(&t_time));
  assert!(!t_list.is_conformant(&t_years_and_months_duration));
  // null
  assert!(t_null.is_conformant(&t_null));
  assert!(t_null.is_conformant(&t_any));
  assert!(t_null.is_conformant(&t_boolean));
  assert!(t_null.is_conformant(&t_context));
  assert!(t_null.is_conformant(&t_date));
  assert!(t_null.is_conformant(&t_date_time));
  assert!(t_null.is_conformant(&t_days_and_time_duration));
  assert!(t_null.is_conformant(&t_function));
  assert!(t_null.is_conformant(&t_list));
  assert!(t_null.is_conformant(&t_range));
  assert!(t_null.is_conformant(&t_string));
  assert!(t_null.is_conformant(&t_time));
  assert!(t_null.is_conformant(&t_years_and_months_duration));
  // number
  assert!(t_number.is_conformant(&t_number));
  assert!(t_number.is_conformant(&t_any));
  assert!(!t_number.is_conformant(&t_boolean));
  assert!(!t_number.is_conformant(&t_context));
  assert!(!t_number.is_conformant(&t_date));
  assert!(!t_number.is_conformant(&t_date_time));
  assert!(!t_number.is_conformant(&t_days_and_time_duration));
  assert!(!t_number.is_conformant(&t_function));
  assert!(!t_number.is_conformant(&t_list));
  assert!(!t_number.is_conformant(&t_null));
  assert!(!t_number.is_conformant(&t_range));
  assert!(!t_number.is_conformant(&t_string));
  assert!(!t_number.is_conformant(&t_time));
  assert!(!t_number.is_conformant(&t_years_and_months_duration));
  // range
  assert!(t_range.is_conformant(&t_range));
  assert!(t_range_b.is_conformant(&t_range_b));
  assert!(t_range.is_conformant(&t_any));
  assert!(!t_range.is_conformant(&t_boolean));
  assert!(!t_range.is_conformant(&t_context));
  assert!(!t_range.is_conformant(&t_date));
  assert!(!t_range.is_conformant(&t_date_time));
  assert!(!t_range.is_conformant(&t_days_and_time_duration));
  assert!(!t_range.is_conformant(&t_function));
  assert!(!t_range.is_conformant(&t_list));
  assert!(!t_range.is_conformant(&t_null));
  assert!(!t_range.is_conformant(&t_number));
  assert!(!t_range.is_conformant(&t_string));
  assert!(!t_range.is_conformant(&t_time));
  assert!(!t_range.is_conformant(&t_years_and_months_duration));
  // string
  assert!(t_string.is_conformant(&t_string));
  assert!(t_string.is_conformant(&t_any));
  assert!(!t_string.is_conformant(&t_boolean));
  assert!(!t_string.is_conformant(&t_context));
  assert!(!t_string.is_conformant(&t_date));
  assert!(!t_string.is_conformant(&t_date_time));
  assert!(!t_string.is_conformant(&t_days_and_time_duration));
  assert!(!t_string.is_conformant(&t_function));
  assert!(!t_string.is_conformant(&t_list));
  assert!(!t_string.is_conformant(&t_null));
  assert!(!t_string.is_conformant(&t_number));
  assert!(!t_string.is_conformant(&t_range));
  assert!(!t_string.is_conformant(&t_time));
  assert!(!t_string.is_conformant(&t_years_and_months_duration));
  // time
  assert!(t_time.is_conformant(&t_time));
  assert!(t_time.is_conformant(&t_any));
  assert!(!t_time.is_conformant(&t_boolean));
  assert!(!t_time.is_conformant(&t_context));
  assert!(!t_time.is_conformant(&t_date));
  assert!(!t_time.is_conformant(&t_date_time));
  assert!(!t_time.is_conformant(&t_days_and_time_duration));
  assert!(!t_time.is_conformant(&t_function));
  assert!(!t_time.is_conformant(&t_list));
  assert!(!t_time.is_conformant(&t_null));
  assert!(!t_time.is_conformant(&t_number));
  assert!(!t_time.is_conformant(&t_range));
  assert!(!t_time.is_conformant(&t_string));
  assert!(!t_time.is_conformant(&t_years_and_months_duration));
  // years and months duration
  assert!(t_years_and_months_duration.is_conformant(&t_years_and_months_duration));
  assert!(t_years_and_months_duration.is_conformant(&t_any));
  assert!(!t_years_and_months_duration.is_conformant(&t_boolean));
  assert!(!t_years_and_months_duration.is_conformant(&t_context));
  assert!(!t_years_and_months_duration.is_conformant(&t_date));
  assert!(!t_years_and_months_duration.is_conformant(&t_date_time));
  assert!(!t_years_and_months_duration.is_conformant(&t_days_and_time_duration));
  assert!(!t_years_and_months_duration.is_conformant(&t_function));
  assert!(!t_years_and_months_duration.is_conformant(&t_list));
  assert!(!t_years_and_months_duration.is_conformant(&t_null));
  assert!(!t_years_and_months_duration.is_conformant(&t_number));
  assert!(!t_years_and_months_duration.is_conformant(&t_range));
  assert!(!t_years_and_months_duration.is_conformant(&t_string));
  assert!(!t_years_and_months_duration.is_conformant(&t_time));
}

#[test]
fn test_is_built_in_type_name() {
  assert!(is_built_in_type_name("Any"));
  assert!(is_built_in_type_name("Null"));
  assert!(is_built_in_type_name("number"));
  assert!(is_built_in_type_name("string"));
  assert!(is_built_in_type_name("boolean"));
  assert!(is_built_in_type_name("days and time duration"));
  assert!(is_built_in_type_name("years and months duration"));
  assert!(is_built_in_type_name("date"));
  assert!(is_built_in_type_name("time"));
  assert!(is_built_in_type_name("date and time"));
  assert!(!is_built_in_type_name("list"));
  assert!(!is_built_in_type_name("range"));
  assert!(!is_built_in_type_name("context"));
  assert!(!is_built_in_type_name("function"));
}

#[test]
fn test_type_stringify() {
  let name_a = Name::from("a");
  let name_b = Name::from("b");
  let name_c = Name::from("c");
  let t_any = FeelType::Any;
  let t_null = FeelType::Null;
  let t_string = FeelType::String;
  let t_number = FeelType::Number;
  let t_boolean = FeelType::Boolean;
  let t_date = FeelType::Date;
  let t_time = FeelType::Time;
  let t_date_time = FeelType::DateTime;
  let t_dt_duration = FeelType::DaysAndTimeDuration;
  let t_ym_duration = FeelType::YearsAndMonthsDuration;
  let t_function_a = FeelType::function(&[FeelType::Number, FeelType::Number], &t_number);
  let t_function_b = FeelType::function(&[], &t_any);
  let t_function_c = FeelType::function(&[], &t_string);
  let t_list_a = FeelType::List(Box::new(FeelType::Boolean));
  let t_list_b = FeelType::List(Box::new(FeelType::Number));
  let t_range_a = FeelType::range(&t_number);
  let t_range_b = FeelType::range(&t_date);
  let t_context_a = FeelType::context(&[(&name_a, &t_number)]);
  let t_context_b = FeelType::context(&[(&name_a, &t_number), (&name_b, &t_boolean)]);
  let t_context_c = FeelType::context(&[(&name_a, &t_number), (&name_b, &t_boolean), (&name_c, &t_string)]);
  assert_eq!("Any", t_any.to_string());
  assert_eq!("Null", t_null.to_string());
  assert_eq!("number", t_number.to_string());
  assert_eq!("boolean", t_boolean.to_string());
  assert_eq!("date", t_date.to_string());
  assert_eq!("time", t_time.to_string());
  assert_eq!("date and time", t_date_time.to_string());
  assert_eq!("days and time duration", t_dt_duration.to_string());
  assert_eq!("years and months duration", t_ym_duration.to_string());
  assert_eq!("string", t_string.to_string());
  assert_eq!("function<number, number>->number", t_function_a.to_string());
  assert_eq!("function<>->Any", t_function_b.to_string());
  assert_eq!("function<>->string", t_function_c.to_string());
  assert_eq!("list<boolean>", t_list_a.to_string());
  assert_eq!("list<number>", t_list_b.to_string());
  assert_eq!("range<number>", t_range_a.to_string());
  assert_eq!("range<date>", t_range_b.to_string());
  assert_eq!("context<a: number>", t_context_a.to_string());
  assert_eq!("context<a: number, b: boolean>", t_context_b.to_string());
  assert_eq!("context<a: number, b: boolean, c: string>", t_context_c.to_string());
}

#[test]
fn test_get_coerced() {
  let t_any = FeelType::Any;
  let t_number = FeelType::Number;
  let t_string = FeelType::String;
  let t_list_number = FeelType::List(Box::new(t_number.clone()));
  let t_list_string = FeelType::List(Box::new(t_string.clone()));
  let t_list_any = FeelType::List(Box::new(t_any));
  let v_number = value_number!(10, 0);
  let v_string = Value::String("a".into());
  let v_list_number_1 = Value::List(Values::new(vec![value_number!(1, 0)]));
  let v_list_number_2 = Value::List(Values::new(vec![value_number!(1, 0), value_number!(2, 0)]));
  let v_list_string_1 = Value::List(Values::new(vec![Value::String("A".to_string())]));
  assert_eq!(r#"[10]"#, t_list_number.coerced(&v_number).to_string());
  assert_eq!(r#"[10]"#, t_list_any.coerced(&v_number).to_string());
  assert_eq!(r#"1"#, t_number.coerced(&v_list_number_1).to_string());
  assert_eq!(r#"null"#, t_number.coerced(&v_list_number_2).to_string());
  assert_eq!(r#"null"#, t_number.coerced(&v_list_string_1).to_string());
  assert_eq!(r#"["a"]"#, t_list_string.coerced(&v_string).to_string());
  assert_eq!(r#"["a"]"#, t_list_any.coerced(&v_string).to_string());
  assert_eq!(r#""A""#, t_string.coerced(&v_list_string_1).to_string());
  assert_eq!(r#"10"#, t_number.coerced(&v_number).to_string());
}

#[test]
#[rustfmt::skip]
fn test_type_get_conformant_value() {
  let name_a = Name::from("a");
  let name_b = Name::from("b");
  let name_c = Name::from("c");
  let t_any = FeelType::Any;
  let t_boolean = FeelType::Boolean;
  let v_boolean_true = Value::Boolean(true);
  let t_date = FeelType::Date;
  let v_date = Value::Date(FeelDate::new(2022, 9, 26));
  let t_date_time = FeelType::DateTime;
  let t_days_and_time_duration = FeelType::DaysAndTimeDuration;
  let t_null = FeelType::Null;
  let v_null = value_null!();
  let t_number = FeelType::Number;
  let v_number_1 = value_number!(1);
  let v_number_2 = value_number!(2);
  let v_number_3 = value_number!(3);
  let t_string = FeelType::String;
  let t_time = FeelType::Time;
  let t_years_and_months_duration = FeelType::YearsAndMonthsDuration;
  let t_list = FeelType::List(Box::new(FeelType::Boolean));
  let t_list_b = FeelType::List(Box::new(FeelType::Number));
  let t_context = FeelType::context(&[(&name_a, &t_number)]);
  let mut ctx_a = FeelContext::default();
  ctx_a.set_entry(&name_a, v_number_1.clone());
  ctx_a.set_entry(&name_b, v_number_2);
  ctx_a.set_entry(&name_c, v_number_3);
  let v_context = Value::Context(ctx_a);
  let t_context_a_b = FeelType::context(&[(&name_a, &t_number), (&name_b, &t_boolean)]);
  let t_context_a_b_c = FeelType::context(&[(&name_a, &t_number), (&name_b, &t_boolean), (&name_c, &t_string)]);
  let t_function = FeelType::function(&[FeelType::Number, FeelType::Number], &t_number);
  let t_function_b = FeelType::function(&[FeelType::Number, FeelType::Number], &t_boolean);
  let t_function_c = FeelType::function(&[FeelType::Number], &t_string);
  let t_function_d = FeelType::function(&[FeelType::Any], &t_string);
  let t_range = FeelType::range(&t_number);
  let t_range_b = FeelType::range(&t_date);
  // any
  assert_eq!(v_boolean_true, t_any.get_conformant_value(&v_boolean_true));
  assert_eq!(v_context, t_any.get_conformant_value(&v_context));
  assert_eq!(v_date, t_any.get_conformant_value(&v_date));
  assert_eq!(v_number_1, t_any.get_conformant_value(&v_number_1));
  assert!(!t_any.is_conformant(&t_date_time));
  assert!(!t_any.is_conformant(&t_days_and_time_duration));
  // boolean
  assert!(t_boolean.is_conformant(&t_boolean));
  assert!(t_boolean.is_conformant(&t_any));
  assert!(!t_boolean.is_conformant(&t_function));
  assert!(!t_boolean.is_conformant(&t_list));
  assert_eq!(value_null!(), t_boolean.get_conformant_value(&v_null));
  assert_eq!(value_null!("type 'boolean' is not conformant with value of type 'number'"), t_boolean.get_conformant_value(&v_number_1));
  assert!(!t_boolean.is_conformant(&t_range));
  assert!(!t_boolean.is_conformant(&t_string));
  assert!(!t_boolean.is_conformant(&t_time));
  assert!(!t_boolean.is_conformant(&t_years_and_months_duration));
  assert!(!t_boolean.is_conformant(&t_context));
  assert!(!t_boolean.is_conformant(&t_date));
  assert!(!t_boolean.is_conformant(&t_date_time));
  assert!(!t_boolean.is_conformant(&t_days_and_time_duration));
  assert!(!t_boolean.is_conformant(&t_function));
  assert!(!t_boolean.is_conformant(&t_list));
  assert!(!t_boolean.is_conformant(&t_null));
  assert!(!t_boolean.is_conformant(&t_number));
  assert!(!t_boolean.is_conformant(&t_range));
  assert!(!t_boolean.is_conformant(&t_string));
  assert!(!t_boolean.is_conformant(&t_time));
  assert!(!t_boolean.is_conformant(&t_years_and_months_duration));
  // context
  assert!(t_context.is_conformant(&t_context));
  assert!(t_context_a_b.is_conformant(&t_context_a_b));
  assert!(t_context_a_b.is_conformant(&t_context));
  assert!(t_context_a_b_c.is_conformant(&t_context_a_b_c));
  assert!(t_context_a_b_c.is_conformant(&t_context_a_b));
  assert!(!t_context.is_conformant(&t_context_a_b));
  assert!(!t_context_a_b.is_conformant(&t_context_a_b_c));
  assert!(!t_context_a_b.is_conformant(&t_context_a_b_c));
  assert!(t_context.is_conformant(&t_any));
  assert!(!t_context.is_conformant(&t_boolean));
  assert!(!t_context.is_conformant(&t_date));
  assert!(!t_context.is_conformant(&t_date_time));
  assert!(!t_context.is_conformant(&t_days_and_time_duration));
  assert!(!t_context.is_conformant(&t_function));
  assert!(!t_context.is_conformant(&t_list));
  assert!(!t_context.is_conformant(&t_null));
  assert!(!t_context.is_conformant(&t_number));
  assert!(!t_context.is_conformant(&t_range));
  assert!(!t_context.is_conformant(&t_string));
  assert!(!t_context.is_conformant(&t_time));
  assert!(!t_context.is_conformant(&t_years_and_months_duration));
  // date
  assert!(t_date.is_conformant(&t_date));
  assert!(t_date.is_conformant(&t_any));
  assert!(!t_date.is_conformant(&t_boolean));
  assert!(!t_date.is_conformant(&t_context));
  assert!(!t_date.is_conformant(&t_date_time));
  assert!(!t_date.is_conformant(&t_days_and_time_duration));
  assert!(!t_date.is_conformant(&t_function));
  assert!(!t_date.is_conformant(&t_list));
  assert!(!t_date.is_conformant(&t_null));
  assert!(!t_date.is_conformant(&t_number));
  assert!(!t_date.is_conformant(&t_range));
  assert!(!t_date.is_conformant(&t_string));
  assert!(!t_date.is_conformant(&t_time));
  assert!(!t_date.is_conformant(&t_years_and_months_duration));
  // date and time
  assert!(t_date_time.is_conformant(&t_date_time));
  assert!(t_date_time.is_conformant(&t_any));
  assert!(!t_date_time.is_conformant(&t_boolean));
  assert!(!t_date_time.is_conformant(&t_context));
  assert!(!t_date_time.is_conformant(&t_date));
  assert!(!t_date_time.is_conformant(&t_function));
  assert!(!t_date_time.is_conformant(&t_list));
  assert!(!t_date_time.is_conformant(&t_null));
  assert!(!t_date_time.is_conformant(&t_number));
  assert!(!t_date_time.is_conformant(&t_range));
  assert!(!t_date_time.is_conformant(&t_string));
  assert!(!t_date_time.is_conformant(&t_time));
  assert!(!t_date_time.is_conformant(&t_years_and_months_duration));
  // days and time duration
  assert!(t_days_and_time_duration.is_conformant(&t_days_and_time_duration));
  assert!(t_days_and_time_duration.is_conformant(&t_any));
  assert!(!t_days_and_time_duration.is_conformant(&t_boolean));
  assert!(!t_days_and_time_duration.is_conformant(&t_context));
  assert!(!t_days_and_time_duration.is_conformant(&t_date));
  assert!(!t_days_and_time_duration.is_conformant(&t_date_time));
  assert!(!t_days_and_time_duration.is_conformant(&t_function));
  assert!(!t_days_and_time_duration.is_conformant(&t_list));
  assert!(!t_days_and_time_duration.is_conformant(&t_null));
  assert!(!t_days_and_time_duration.is_conformant(&t_number));
  assert!(!t_days_and_time_duration.is_conformant(&t_range));
  assert!(!t_days_and_time_duration.is_conformant(&t_string));
  assert!(!t_days_and_time_duration.is_conformant(&t_time));
  assert!(!t_days_and_time_duration.is_conformant(&t_years_and_months_duration));
  // function
  assert!(t_function.is_conformant(&t_function));
  assert!(t_function_b.is_conformant(&t_function_b));
  assert!(t_function_c.is_conformant(&t_function_c));
  assert!(!t_function.is_conformant(&t_function_b));
  assert!(!t_function.is_conformant(&t_function_c));
  assert!(!t_function_b.is_conformant(&t_function));
  assert!(!t_function_b.is_conformant(&t_function_c));
  assert!(!t_function_c.is_conformant(&t_function));
  assert!(!t_function_c.is_conformant(&t_function_b));
  assert!(t_function_d.is_conformant(&t_function_c));
  assert!(t_function.is_conformant(&t_any));
  assert!(!t_function.is_conformant(&t_boolean));
  assert!(!t_function.is_conformant(&t_context));
  assert!(!t_function.is_conformant(&t_date));
  assert!(!t_function.is_conformant(&t_date_time));
  assert!(!t_function.is_conformant(&t_days_and_time_duration));
  assert!(!t_function.is_conformant(&t_list));
  assert!(!t_function.is_conformant(&t_null));
  assert!(!t_function.is_conformant(&t_range));
  assert!(!t_function.is_conformant(&t_string));
  assert!(!t_function.is_conformant(&t_time));
  assert!(!t_function.is_conformant(&t_years_and_months_duration));
  // list
  assert!(t_list_b.is_conformant(&t_list_b));
  assert!(!t_list_b.is_conformant(&t_list));
  assert!(t_list.is_conformant(&t_any));
  assert!(!t_list.is_conformant(&t_boolean));
  assert!(!t_list.is_conformant(&t_context));
  assert!(!t_list.is_conformant(&t_date));
  assert!(!t_list.is_conformant(&t_date_time));
  assert!(!t_list.is_conformant(&t_days_and_time_duration));
  assert!(!t_list.is_conformant(&t_function));
  assert!(!t_list.is_conformant(&t_null));
  assert!(!t_list.is_conformant(&t_range));
  assert!(!t_list.is_conformant(&t_string));
  assert!(!t_list.is_conformant(&t_time));
  assert!(!t_list.is_conformant(&t_years_and_months_duration));
  // null
  assert!(t_null.is_conformant(&t_null));
  assert!(t_null.is_conformant(&t_any));
  assert!(t_null.is_conformant(&t_boolean));
  assert!(t_null.is_conformant(&t_context));
  assert!(t_null.is_conformant(&t_date));
  assert!(t_null.is_conformant(&t_date_time));
  assert!(t_null.is_conformant(&t_days_and_time_duration));
  assert!(t_null.is_conformant(&t_function));
  assert!(t_null.is_conformant(&t_list));
  assert!(t_null.is_conformant(&t_range));
  assert!(t_null.is_conformant(&t_string));
  assert!(t_null.is_conformant(&t_time));
  assert!(t_null.is_conformant(&t_years_and_months_duration));
  // number
  assert!(t_number.is_conformant(&t_number));
  assert!(t_number.is_conformant(&t_any));
  assert!(!t_number.is_conformant(&t_boolean));
  assert!(!t_number.is_conformant(&t_context));
  assert!(!t_number.is_conformant(&t_date));
  assert!(!t_number.is_conformant(&t_date_time));
  assert!(!t_number.is_conformant(&t_days_and_time_duration));
  assert!(!t_number.is_conformant(&t_function));
  assert!(!t_number.is_conformant(&t_list));
  assert!(!t_number.is_conformant(&t_null));
  assert!(!t_number.is_conformant(&t_range));
  assert!(!t_number.is_conformant(&t_string));
  assert!(!t_number.is_conformant(&t_time));
  assert!(!t_number.is_conformant(&t_years_and_months_duration));
  // range
  assert!(t_range.is_conformant(&t_range));
  assert!(t_range_b.is_conformant(&t_range_b));
  assert!(t_range.is_conformant(&t_any));
  assert!(!t_range.is_conformant(&t_boolean));
  assert!(!t_range.is_conformant(&t_context));
  assert!(!t_range.is_conformant(&t_date));
  assert!(!t_range.is_conformant(&t_date_time));
  assert!(!t_range.is_conformant(&t_days_and_time_duration));
  assert!(!t_range.is_conformant(&t_function));
  assert!(!t_range.is_conformant(&t_list));
  assert!(!t_range.is_conformant(&t_null));
  assert!(!t_range.is_conformant(&t_number));
  assert!(!t_range.is_conformant(&t_string));
  assert!(!t_range.is_conformant(&t_time));
  assert!(!t_range.is_conformant(&t_years_and_months_duration));
  // string
  assert!(t_string.is_conformant(&t_string));
  assert!(t_string.is_conformant(&t_any));
  assert!(!t_string.is_conformant(&t_boolean));
  assert!(!t_string.is_conformant(&t_context));
  assert!(!t_string.is_conformant(&t_date));
  assert!(!t_string.is_conformant(&t_date_time));
  assert!(!t_string.is_conformant(&t_days_and_time_duration));
  assert!(!t_string.is_conformant(&t_function));
  assert!(!t_string.is_conformant(&t_list));
  assert!(!t_string.is_conformant(&t_null));
  assert!(!t_string.is_conformant(&t_number));
  assert!(!t_string.is_conformant(&t_range));
  assert!(!t_string.is_conformant(&t_time));
  assert!(!t_string.is_conformant(&t_years_and_months_duration));
  // time
  assert!(t_time.is_conformant(&t_time));
  assert!(t_time.is_conformant(&t_any));
  assert!(!t_time.is_conformant(&t_boolean));
  assert!(!t_time.is_conformant(&t_context));
  assert!(!t_time.is_conformant(&t_date));
  assert!(!t_time.is_conformant(&t_date_time));
  assert!(!t_time.is_conformant(&t_days_and_time_duration));
  assert!(!t_time.is_conformant(&t_function));
  assert!(!t_time.is_conformant(&t_list));
  assert!(!t_time.is_conformant(&t_null));
  assert!(!t_time.is_conformant(&t_number));
  assert!(!t_time.is_conformant(&t_range));
  assert!(!t_time.is_conformant(&t_string));
  assert!(!t_time.is_conformant(&t_years_and_months_duration));
  // years and months duration
  assert!(t_years_and_months_duration.is_conformant(&t_years_and_months_duration));
  assert!(t_years_and_months_duration.is_conformant(&t_any));
  assert!(!t_years_and_months_duration.is_conformant(&t_boolean));
  assert!(!t_years_and_months_duration.is_conformant(&t_context));
  assert!(!t_years_and_months_duration.is_conformant(&t_date));
  assert!(!t_years_and_months_duration.is_conformant(&t_date_time));
  assert!(!t_years_and_months_duration.is_conformant(&t_days_and_time_duration));
  assert!(!t_years_and_months_duration.is_conformant(&t_function));
  assert!(!t_years_and_months_duration.is_conformant(&t_list));
  assert!(!t_years_and_months_duration.is_conformant(&t_null));
  assert!(!t_years_and_months_duration.is_conformant(&t_number));
  assert!(!t_years_and_months_duration.is_conformant(&t_range));
  assert!(!t_years_and_months_duration.is_conformant(&t_string));
  assert!(!t_years_and_months_duration.is_conformant(&t_time));
}
